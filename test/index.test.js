import dedent from 'dedent-js'
import buildFluentTypeModule from '../src'

test('Should match the types definitions', async () => {
  const fixture = dedent`
    hello = Olá { $name }
    how-are-you = Como você está?
    bye = Tchau
  `

  const fluentTypeModule = buildFluentTypeModule(fixture)

  expect(fluentTypeModule).toBe(dedent`
    // This file is automatically generated.
    // Please do not change this file!

    import { ComplexPattern } from '@fluent/bundle/esm/ast'
    import { FluentBundle } from '@fluent/bundle'

    type Pattern<T> = T | ComplexPattern

    type Message<T> = {
      id: T
      value: Pattern<T>
      attributes: Record<string, Pattern<T>>
    }

    declare global {
      interface FluentBundleTyped extends FluentBundle {
        getMessage<T extends MessagesKey>(id: T): Message<T>
        formatPattern: <T extends MessagesKey>(pattern: Pattern<T>, ...args: PatternArguments<T>) => string
      }
    }

    type MessagesKey = 'hello' |
    'how-are-you' |
    'bye'
    type PatternArguments<T extends MessagesKey> = (
      T extends 'hello'
      ? [{ 'name': string | number }]:
    T extends 'how-are-you'
      ? []:
    T extends 'bye'
      ? []
      : never
    )
  `)
})
