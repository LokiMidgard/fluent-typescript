import dedent from 'dedent-js'
import { buildFluentTypeModule, start } from '../src'

test('Should match the types definitions', async () => {
  const fixturePt = dedent`
    hello = Olá { $firstName }
    how-are-you = Como você está?
    bye = Tchau
  `
  const fixtureJp = dedent`
    hello = こんにちは{ $lastName }
    how-are-you = お元気ですか？
  `

  start([
    { path: 'pt.ftl', content: fixturePt },
    { path: 'jp.ftl', content: fixtureJp },
  ])

  const fluentTypeModule = buildFluentTypeModule({ path: 'pt.ftl', content: fixturePt })

  expect(fluentTypeModule).toBe(dedent`
    // This file is automatically generated.
    // Please do not change this file!

    import { FluentBundle, FluentArgument } from '@fluent/bundle'

    type Message<T extends MessagesKey> = {
      id: T
      value: T
      attributes: Record<string, T>
    }

    declare global {
      interface FluentBundleTyped extends FluentBundle {
        getMessage<T extends MessagesKey>(id: T): Message<T>
        formatPattern: <T extends MessagesKey>(...args: PatternArguments<T>) => string
      }
    }

    type MessagesKey = 'hello' |
    'how-are-you' |
    'bye'
    type PatternArguments<T extends MessagesKey> = (
      T extends 'hello'
      ? [T, { 'firstName': FluentArgument,'lastName': FluentArgument }]:
    T extends 'how-are-you'
      ? [T]:
    T extends 'bye'
      ? [T]
      : never
    )
  `)
})
