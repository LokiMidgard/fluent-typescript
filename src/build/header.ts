import dedent from 'dedent-js'

const bannerMessage = (
  '// This file is automatically generated.\n// Please do not change this file!\n\n'
)

const vanillaSupport = dedent`
  import { FluentBundle, FluentVariable } from '@fluent/bundle'

  declare global {
    interface FluentBundleTyped extends FluentBundle {
      getMessage<T extends MessagesKey>(id: T): Message<T>
      formatPattern: <T extends MessagesKey>(...args: PatternArguments<T>) => string
    }
  }
`

const i18NextSupport = dedent`
  import { FluentVariable } from '@fluent/bundle'
  import { TransProps } from 'react-i18next'

  declare module 'react-i18next' {
    interface UseTranslationResponsePatched extends Omit<UseTranslationResponse, 't'> {
      t: <T extends MessagesKey>(...args: PatternArguments<T>) => string
    }

    function useTranslation(ns?: Namespace, options?: UseTranslationOptions): UseTranslationResponsePatched
  }
`

const fluentReactSupport = dedent`
  import { FluentVariable } from '@fluent/bundle'
  import { LocalizedProps } from '@fluent/react'
  import { ReactElement } from 'react'

  declare module '@fluent/react' {
    type LocalizedPropsWithoutIdAndVars = Omit<Omit<LocalizedProps, 'id'>, 'vars'>

    type LocalizedPropsPatched<T extends MessagesKey> = (
      PatternArguments<T>[1] extends undefined
        ? {
          typed: true
          id: T
        } & LocalizedPropsWithoutIdAndVars
        : {
          typed: true
          id: T
          vars: PatternArguments<T>[1]
        } & LocalizedPropsWithoutIdAndVars
    )

    function Localized<T extends MessagesKey>(props: LocalizedPropsPatched<T>): ReactElement;
  }
`

const targetSupport: { [key in TargetsSupported]: string } = {
  vanilla: vanillaSupport,
  'react-18next': i18NextSupport,
  'fluent-react': fluentReactSupport,
}

const header = (target: TargetsSupported) => dedent`
  type Message<T extends MessagesKey> = {
    id: T
    value: T
    attributes: Record<string, T>
  }

  ${targetSupport[target]}
`

const buildHeader = (target: TargetsSupported) => `${bannerMessage}${header(target)}\n`

export default buildHeader
