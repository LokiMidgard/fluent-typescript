import dedent from 'dedent-js'

const bannerMessage = (
  '// This file is automatically generated.\n// Please do not change this file!\n\n'
)

const vanillaSupport = (chunks: MessageVariablesChunks) => {
  const functions = chunks
    .map((_, index) => dedent`
      getMessage<T extends MessagesKey${index}>(id: T): Message${index}<T>
      formatPattern<T extends MessagesKey${index}>(...args: PatternArguments${index}<T>): string
    `)
    .join('\n    ')

  return dedent`
    import { FluentBundle, FluentVariable } from '@fluent/bundle'

    declare global {
      interface FluentBundleTyped extends FluentBundle {
        ${functions}
      }
    }
  `
}

const i18NextSupport = (chunks: MessageVariablesChunks) => {
  const functions = chunks
    .map((_, index) =>
      `t<T extends MessagesKey${index}>(...args: PatternArguments${index}<T>): string`
    )
    .join('\n    ')

  return dedent`
    import { FluentVariable } from '@fluent/bundle'

    declare module 'react-i18next' {
      interface UseTranslationResponsePatched extends Omit<UseTranslationResponse, 't'> {
        ${functions}
      }

      function useTranslation(ns?: Namespace, options?: UseTranslationOptions): UseTranslationResponsePatched
    }
  `
}

const fluentReactSupport = (chunks: MessageVariablesChunks) => {
  const functions = chunks
    .map((_, index) => dedent`
      type LocalizedPropsPatched${index}<T extends MessagesKey${index}> = (
        PatternArguments${index}<T>[1] extends undefined
          ? {
            typed: true
            id: T
          } & LocalizedPropsWithoutIdAndVars
          : {
            typed: true
            id: T
            vars: PatternArguments${index}<T>[1]
          } & LocalizedPropsWithoutIdAndVars
      )

      function Localized<T extends MessagesKey${index}>(props: LocalizedPropsPatched${index}<T>): ReactElement;
    `)
    .join('\n    ')

  return dedent`
    import { FluentVariable } from '@fluent/bundle'
    import { LocalizedProps } from '@fluent/react'
    import { ReactElement } from 'react'

    declare module '@fluent/react' {
      type LocalizedPropsWithoutIdAndVars = Omit<Omit<LocalizedProps, 'id'>, 'vars'>

      ${functions}
    }
  `
}

const targetSupport: { [key in TargetsSupported]: (chunks: MessageVariablesChunks) => string } = {
  vanilla: vanillaSupport,
  'react-18next': i18NextSupport,
  'fluent-react': fluentReactSupport,
}

const header = (target: TargetsSupported, chunks: MessageVariablesChunks) => {
  const messages = chunks
    .map((_, index) => dedent`
      type Message${index}<T extends MessagesKey${index}> = {
        id: T
        value: T
        attributes: Record<string, T>
      }
    `)
    .join('\n\n')

  return dedent`
    ${messages}

    ${targetSupport[target](chunks)}
  `
}

const buildHeader = (target: TargetsSupported, chunks: MessageVariablesChunks) => `${bannerMessage}${header(target, chunks)}\n`

export default buildHeader
