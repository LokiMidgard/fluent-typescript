import dedent from 'dedent-js'

const bannerMessage = (
  '// This file is automatically generated.\n// Please do not change this file!\n\n'
)

const vanillaSupport = (messagesVariables: MessageVariablesMap) => {


  const batchSize = 25;

  let numberOfBatches = Math.ceil(Object.keys(messagesVariables).length / batchSize);

  let returnValue = ''

  for (let index = 0; index < numberOfBatches; index++) {
    returnValue += dedent`

    getMessage<T extends MessagesKey${index}>(id: T): Message${index}<T>
      formatPattern<T extends MessagesKey${index}>(...args: PatternArguments${index}<T>) : string


      `
  }



  return dedent`
  import { FluentBundle, FluentVariable } from '@fluent/bundle'

  declare global {
    interface FluentBundleTyped extends FluentBundle {
    ${returnValue}      
    }
  }
`}

const i18NextSupport = (messagesVariables: MessageVariablesMap) => dedent`
  import { FluentVariable } from '@fluent/bundle'
  import { TransProps } from 'react-i18next'

  declare module 'react-i18next' {
    interface UseTranslationResponsePatched extends Omit<UseTranslationResponse, 't'> {
      t: <T extends MessagesKey>(...args: PatternArguments<T>) => string
    }

    function useTranslation(ns?: Namespace, options?: UseTranslationOptions): UseTranslationResponsePatched
  }
`

const fluentReactSupport = (messagesVariables: MessageVariablesMap) => dedent`
  import { FluentVariable } from '@fluent/bundle'
  import { LocalizedProps } from '@fluent/react'
  import { ReactElement } from 'react'

  declare module '@fluent/react' {
    type LocalizedPropsWithoutIdAndVars = Omit<Omit<LocalizedProps, 'id'>, 'vars'>

    type LocalizedPropsPatched<T extends MessagesKey> = (
      PatternArguments<T>[1] extends undefined
        ? {
          typed: true
          id: T
        } & LocalizedPropsWithoutIdAndVars
        : {
          typed: true
          id: T
          vars: PatternArguments<T>[1]
        } & LocalizedPropsWithoutIdAndVars
    )

    function Localized<T extends MessagesKey>(props: LocalizedPropsPatched<T>): ReactElement;
  }
`

const targetSupport: { [key in TargetsSupported]: (messagesVariables: MessageVariablesMap) => string } = {
  vanilla: vanillaSupport,
  'react-18next': i18NextSupport,
  'fluent-react': fluentReactSupport,
}

const header = (target: TargetsSupported, messagesVariables: MessageVariablesMap) => {
  const batchSize = 25;

  let numberOfBatches = Math.ceil(Object.keys(messagesVariables).length / batchSize);

  let returnValue = ''

  for (let index = 0; index < numberOfBatches; index++) {
    returnValue += dedent`
    type Message${index}<T extends MessagesKey${index}> = {
      id: T
      value: T
      attributes: Record<string, T>
    }
    
    `
  }

  return dedent`
  ${returnValue}

  ${targetSupport[target](messagesVariables)}
`
}
const buildHeader = (target: TargetsSupported, messagesVariables: MessageVariablesMap) => `${bannerMessage}${header(target, messagesVariables)}\n`

export default buildHeader
