// This file is automatically generated.
// Please do not change this file!

type Message<T extends MessagesKey> = {
  id: T
  value: T
  attributes: Record<string, T>
}

import { FluentVariable } from '@fluent/bundle'
import { LocalizedProps } from '@fluent/react'
import { ReactElement } from 'react'

declare module '@fluent/react' {
  type LocalizedPropsWithoutIdAndVars = Omit<Omit<LocalizedProps, 'id'>, 'vars'>

  type LocalizedPropsPatched<T extends MessagesKey> = (
    PatternArguments<T>[1] extends undefined
      ? {
        typed: true
        id: T
      } & LocalizedPropsWithoutIdAndVars
      : {
        typed: true
        id: T
        vars: PatternArguments<T>[1]
      } & LocalizedPropsWithoutIdAndVars
  )

  function Localized<T extends MessagesKey>(props: LocalizedPropsPatched<T>): ReactElement;
}

type MessagesKey = 'hello-no-name' |
'hello' |
'how-are-you' |
'type-name'
type PatternArguments<T extends MessagesKey> = (
  T extends 'hello-no-name'
  ? [T]:
T extends 'hello'
  ? [T, { 'firstName': FluentVariable,'lastName': FluentVariable }]:
T extends 'how-are-you'
  ? [T]:
T extends 'type-name'
  ? [T]
  : never
)