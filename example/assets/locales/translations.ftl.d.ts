// This file is automatically generated.
// Please do not change this file!

import { FluentBundle, FluentArgument } from '@fluent/bundle'

type Pattern<T extends MessagesKey> = T | Parameters<FluentBundle['formatPattern']>[0]

type Message<T extends MessagesKey> = {
  id: T
  value: Pattern<T>
  attributes: Record<string, Pattern<T>>
}

declare global {
  interface FluentBundleTyped extends FluentBundle {
    getMessage<T extends MessagesKey>(id: T): Message<T>
    formatPattern: <T extends MessagesKey>(pattern: Pattern<T>, ...args: PatternArguments<T>) => string
  }
}

type MessagesKey = 'hello' |
'how-are-you' |
'bye'
type PatternArguments<T extends MessagesKey> = (
  T extends 'hello'
  ? [{ 'firstName': FluentArgument,'lastName': FluentArgument }]:
T extends 'how-are-you'
  ? []:
T extends 'bye'
  ? []
  : never
)